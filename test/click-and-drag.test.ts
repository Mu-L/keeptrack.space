import { clickAndDragHeight, clickAndDragWidth } from '../src/engine/utils/click-and-drag';
// Generated by CodiumAI

/*
 *Code Analysis
 *
 *Objective:
 *The objective of the clickAndDragWidth function is to add click and drag functionality to resize an HTML element horizontally by creating a new element on the right edge of the
 *given element and updating its width on mouse movement.
 *
 *Inputs:
 *- el: the HTML element to be resized
 *- options: an optional object with minWidth and maxWidth properties to set the minimum and maximum width of the element
 *
 *Flow:
 *1. Set the minWidth and maxWidth variables based on the options object or default values
 *2. Initialize variables for startX, startWidth, width, and settingsManager.isDragging
 *3. Create a new element on the right edge of the given element using the createElWidth_ function
 *4. Add event listeners to the new element using the addEventsWidth_ function to handle mouse down, mouse up, and mouse move events
 *5. Update the width of the given element on mouse move while dragging
 *6. Return nothing
 *
 *Outputs:
 *The function does not have any explicit outputs, but it adds click and drag functionality to resize the given HTML element horizontally.
 *
 *Additional aspects:
 *- The function uses the requestAnimationFrame method to optimize performance by updating the width of the element only when the browser is ready to repaint the screen.
 *- The function uses the Date.now() method to keep track of the last time the width of the element was updated, which can be useful for debouncing or throttling the resize event.
 *- The function uses the settingsManager object to keep track of whether the user is currently dragging the element.
 */

describe('clickAndDragWidth_function', () => {
  // Mock requestAnimationFrame
  global.requestAnimationFrame = (callback: FrameRequestCallback) => {
    setTimeout(callback, 0);

    return 16;
  };

  // Tests that the function creates a div element and appends it to the HTMLElement with the correct styles
  it('test_create_el_width', () => {
    const el = document.createElement('div');

    clickAndDragWidth(el);
    const edgeEl = <HTMLElement>el.querySelector('div');

    expect(edgeEl).toBeTruthy();
    expect(edgeEl.style.position).toBe('relative');
    expect(edgeEl.style.height).toBe('100%');
    expect(edgeEl.style.width).toBe('8px');
    expect(edgeEl.style.right).toBe('0px');
    expect(edgeEl.style.cursor).toBe('w-resize');
    expect(edgeEl.style.zIndex).toBe('9999');
    expect(edgeEl.style.marginLeft).toBe('auto');
  });

  // Tests that the function sets the width to 280 if it is not provided in the options object
  it('test_min_width_default', () => {
    const el = document.createElement('div');

    el.style.width = '200px';
    clickAndDragWidth(el);
    expect(el.style.width).toBe('280px');
  });

  // Tests that the function sets the width to 450 if it is not provided in the options object
  it('test_max_width_default', () => {
    const el = document.createElement('div');

    el.style.width = '500px';
    clickAndDragWidth(el);
    expect(el.style.width).toBe('450px');
  });

  // Tests that the function sets the width to the provided value if it is provided in the options object
  it('test_min_width_override', () => {
    const el = document.createElement('div');

    el.style.width = '180px';
    clickAndDragWidth(el, { minWidth: 200 });
    expect(el.style.width).toBe('200px');
  });

  // Tests that the function sets the width to the provided value if it is provided in the options object
  it('test_max_width_override', () => {
    const el = document.createElement('div');

    el.style.width = '550px';
    clickAndDragWidth(el, { maxWidth: 500 });
    expect(el.style.width).toBe('500px');
  });

  /*
   * Tests that the function sets the width to the minWidth if the calculated width is less than the minWidth, and sets the width to the maxWidth if the calculated width is greater
   *  than the maxWidth
   */
  it('test_width_bounds', () => {
    const el = document.createElement('div');

    clickAndDragWidth(el);
    const edgeEl = <HTMLElement>el.querySelector('div');

    edgeEl.dispatchEvent(new MouseEvent('mousedown', { clientX: 0 }));
    edgeEl.dispatchEvent(new MouseEvent('mousemove', { clientX: -1000 }));
    expect(parseInt(el.style.width)).toBe(280);
    edgeEl.dispatchEvent(new MouseEvent('mousemove', { clientX: 1000 }));
    jest.advanceTimersByTime(16);
    expect(parseInt(el.style.width)).toBe(450);
    edgeEl.dispatchEvent(new MouseEvent('mouseup'));
    jest.advanceTimersByTime(16);
    expect(parseInt(el.style.width)).toBe(450);
  });
});

// Generated by CodiumAI

/*
 *Code Analysis
 *
 *Objective:
 *The objective of the 'clickAndDragHeight' function is to create a new element on the right edge of the given HTML element, which can be clicked and dragged to adjust the height
 *of the given element. The function also allows for setting a maximum height and a callback function to be executed when the height is changed.
 *
 *Inputs:
 *- el: the HTML element to adjust the height of
 *- maxHeight (optional): the maximum height the element can be adjusted to
 *- callback (optional): a function to be executed when the height is changed
 *
 *Flow:
 *1. Initialize variables for startY, startHeight, height, and settingsManager.isDragging
 *2. Create a new element on the right edge of the given HTML element using the 'createElHeight_' function
 *3. Call the 'addEventsHeight_' function with the new element and other variables as inputs
 *4. Return the startY, startHeight, height, and lastUpdate variables from the 'addEventsHeight_' function
 *
 *Outputs:
 *- None (the function does not return anything)
 *
 *Additional aspects:
 *- The 'addEventsHeight_' function is called within the 'clickAndDragHeight' function to add event listeners to the new element and adjust the height of the given HTML element
 *  accordingly
 *- The 'createElHeight_' function is used to create the new element on the right edge of the given HTML element
 *- The 'settingsManager' variable is not defined within the given code and may be defined elsewhere in the program
 */

describe('clickAndDragHeight_function', () => {
  // Tests that the function adds a new div element to the provided HTMLElement
  it('test_adds_new_div_element', () => {
    const el = document.createElement('div');

    clickAndDragHeight(el);
    expect(el.children).toHaveLength(1);
    expect(el.children[0].tagName).toBe('DIV');
  });

  // Tests that the function sets the style properties of the new div element
  it('test_sets_style_properties', () => {
    const el = document.createElement('div');

    clickAndDragHeight(el);
    const edgeEl = <HTMLElement>el.children[0];

    expect(edgeEl.style.position).toBe('absolute');
    expect(edgeEl.style.width).toBe('100%');
    expect(edgeEl.style.height).toBe('8px');
    expect(edgeEl.style.top).toBe('0px');
    expect(edgeEl.style.cursor).toBe('n-resize');
    expect(edgeEl.style.zIndex).toBe('9999');
    expect(edgeEl.style.marginBottom).toBe('auto');
    expect(edgeEl.style.marginLeft).toBe('auto');
    expect(edgeEl.style.marginRight).toBe('auto');
  });

  // Tests that the function updates the height variable to the minimum of maxHeight and the calculated height when maxHeight is provided
  it('test_updates_height_with_maxHeight', () => {
    const el = document.createElement('div');

    el.style.height = '50px';
    const maxHeight = 100;

    clickAndDragHeight(el, maxHeight);
    const edgeEl = el.children[0];

    edgeEl.dispatchEvent(new MouseEvent('mousedown', { clientY: 150 }));
    edgeEl.dispatchEvent(new MouseEvent('mousemove', { clientY: 50 }));
    edgeEl.dispatchEvent(new MouseEvent('mouseup'));
    jest.advanceTimersByTime(16);
    expect(el.style.height).toBe(`${maxHeight}px`);
  });

  // Tests that the function does not throw an error when callback is not provided
  it('test_does_not_throw_error_without_callback', () => {
    const el = document.createElement('div');

    expect(() => clickAndDragHeight(el)).not.toThrow();
  });

  // Tests that the function sets the style properties of the new div element to position: absolute on 'mouseup'
  it('test_sets_style_properties_on_mouseup', () => {
    const el = document.createElement('div');

    clickAndDragHeight(el);
    const edgeEl = <HTMLElement>el.children[0];
    const e = new MouseEvent('mouseup');

    edgeEl.dispatchEvent(e);
    expect(edgeEl.style.position).toBe('absolute');
    expect(edgeEl.style.width).toBe('100%');
    expect(edgeEl.style.height).toBe('8px');
  });
});
