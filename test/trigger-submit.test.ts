import { triggerSubmit } from '../src/engine/utils/trigger-submit';
// Generated by CodiumAI

/*
 *Code Analysis
 *
 *Objective:
 *The objective of the triggerSubmit function is to dispatch a custom event named 'customSubmit' on the provided HTMLFormElement. This function is typically used to trigger a form
 *submission programmatically.
 *
 *Inputs:
 *- formElement: an HTMLFormElement that represents the form to be submitted.
 *
 *Flow:
 *1. Create a new CustomEvent object named 'event' with the type 'customSubmit' and the cancelable property set to true.
 *2. Dispatch the 'event' on the 'formElement'.
 *
 *Outputs:
 *- None
 *
 *Additional aspects:
 *- The 'customSubmit' event can be listened to and handled by other parts of the application.
 *- The 'cancelable' property of the event allows the event to be cancelled by event listeners if necessary.
 */

describe('triggerSubmit_function', () => {
  // Tests that the function dispatches the 'customSubmit' event when called with a valid form element
  it('test_happy_path_dispatches_event', () => {
    const form = document.createElement('form');
    const spy = jest.spyOn(form, 'dispatchEvent');

    triggerSubmit(form);
    expect(spy).toHaveBeenCalledWith(expect.any(CustomEvent));
  });

  // Tests that the 'customSubmit' event is cancelable
  it('test_happy_path_event_cancelable', () => {
    const form = document.createElement('form');
    const event = new CustomEvent('customSubmit', { cancelable: true });

    form.addEventListener('customSubmit', (e) => {
      e.preventDefault();
    });
    form.dispatchEvent(event);
    expect(event.defaultPrevented).toBe(true);
  });

  // Tests that additional data can be attached to the 'customSubmit' event
  it('test_happy_path_event_additional_data', () => {
    const form = document.createElement('form');
    const data = { name: 'John Doe' };
    const event = new CustomEvent('customSubmit', { detail: data });

    form.addEventListener('customSubmit', (e: Event) => {
      expect((<CustomEvent>e).detail).toEqual(data);
    });
    form.dispatchEvent(event);
  });
});
