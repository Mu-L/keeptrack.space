// Generated by CodiumAI

import { dateFormat } from '@app/engine/utils/dateFormat';

/**
 *Objective:
 *The dateFormat function is designed to format a given date object or string into a specified format mask. It can also handle UTC time and has default format masks for various
 *date and time formats.
 *
 *Inputs:
 *- date: a string or Date object representing the date to be formatted (optional)
 *- mask: a string representing the desired format mask (optional)
 *- utc: a boolean indicating whether to use UTC time (default is false)
 *
 *Flow:
 *1. Check if the first input is a string without any digits, if so, assume it is the mask and set the date input to undefined.
 *2. Create a new Date object using the date input or the current date if no input is provided.
 *3. Check if the date object is valid, throw an error if not.
 *4. Set the mask to the provided mask or a default mask if none is provided.
 *5. If the mask starts with 'UTC:', set utc to true and remove the 'UTC:' prefix from the mask.
 *6. Get the relevant date and time values from the date object using the get functions.
 *7. Create an object containing the various format flags based on the date and time values.
 *8. Replace the tokens in the mask with their corresponding format flags.
 *9. Return the formatted string.
 *
 *Outputs:
 *- A formatted string representing the date and time according to the specified format mask.
 *
 *Additional aspects:
 *- The function uses a regular expression to match tokens in the format mask.
 *- The function also handles timezones and can extract the timezone from the date input if provided.
 *- The function has default format masks for various date and time formats, which can be used by passing in the corresponding key as the mask input.
 */

describe('dateFormat_function', () => {
  // Tests that the function works correctly with the default mask
  it('test_default_mask', () => {
    const date = new Date('2022-01-01T00:00:00');
    const expected = 'Sat Jan 01 2022 00:00:00';
    const result = dateFormat(date, 'default');

    expect(result).toEqual(expected);
  });

  // Tests that the function works correctly with a custom mask
  it('test_custom_mask', () => {
    const date = new Date('2022-01-01T00:00:00');
    const expected = '1/1/22';
    const result = dateFormat(date, 'shortDate');

    expect(result).toEqual(expected);
  });

  // Tests that the function works correctly with the UTC flag
  it('test_utc_flag', () => {
    // create a date object with '2022-01-01T00:00:00' in UTC time
    const date = new Date('2022-01-01T00:00:00Z');
    const expected = '2022-01-01 00:00:00';
    const result = dateFormat(date, 'UTC:yyyy-mm-dd HH:MM:ss', true);

    expect(result).toEqual(expected);
  });

  // Tests that the function throws an error with an invalid date string
  it('test_invalid_date_string', () => {
    expect(() => {
      dateFormat('invalid date string', 'default');
    }).toThrow(SyntaxError);
  });

  // Tests that the function throws an error with an invalid date object
  it('test_invalid_date_object', () => {
    expect(() => {
      // @ts-expect-error - Invalid date object
      dateFormat({}, 'default');
    }).toThrow(SyntaxError);
  });
});
