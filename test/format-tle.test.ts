// Generated by CodiumAI

import { FormatTle, TleParams } from '@ootk/src/main';

describe('FormatTle_class', () => {
  // Tests that TLE1 and TLE2 are created correctly with valid input
  it('test_create_tle_valid_input', () => {
    const tleParams = {
      sat: {
        tle1: '1 25544U 98067A   21275.13678787  .00001908  00000-0  44309-4 0  9997',
        tle2: '2 25544  51.6443  82.9945 0002979  18.8536 341.2878 15.48970283297422',
      },
      inc: '51.6443',
      meanmo: '15.48970283',
      rasc: '82.9945',
      argPe: '18.8536',
      meana: '341.2878',
      ecen: '0002979',
      epochyr: '21',
      epochday: '275.13678787',
      intl: '98067A  ',
      scc: '25544',
    };
    const { tle1, tle2 } = FormatTle.createTle(tleParams as unknown as TleParams);

    expect(tle1).toBe('1 25544U 98067A   21275.13678787 +.00001908 +00000-0 +44309-4 0 09997');
    expect(tle2).toBe('2 25544 051.6443 082.9945 0002979 018.8536 341.2878 15.48970283 00010');
  });

  // Test that an error is thrown if inc length is not 8
  it('test_inclination_invalid_length', () => {
    expect(() => {
      FormatTle.inclination('123456789');
    }).toThrow('inc length is not 8');
  });

  // Test that an error is thrown if meana length is not 8
  it('test_mean_anomaly_invalid_length', () => {
    expect(() => {
      FormatTle.meanAnomaly('123456789');
    }).toThrow('meana length is not 8');
  });

  // Test that an error is thrown if meanmo length is not 11
  it('test_mean_motion_invalid_length', () => {
    expect(() => {
      FormatTle.meanMotion('123456789012');
    }).toThrow('meanmo length is not 11');
  });

  // Test that an error is thrown if rasc length is not 8
  it('test_right_ascension_invalid_length', () => {
    expect(() => {
      FormatTle.rightAscension('123456789');
    }).toThrow('rasc length is not 8');
  });

  // Test that an error is thrown if argPe length is not 8
  it('test_argument_of_perigee_invalid_length', () => {
    expect(() => {
      FormatTle.argumentOfPerigee('123456789');
    }).toThrow('argPe length is not 8');
  });

  // Test that TLE1Ending is correctly modified with explicit positive/negative signs when input is invalid
  it('test_TLE1_ending_invalid_input', () => {
    const TLE1Ending = ' +.00000000 +00000+0 +00000-0 0  9990';
    const expected = ' +.00000000 +00000+0 +00000-0 0  9990';

    expect(FormatTle.setCharAt(TLE1Ending, 1, '+')).toEqual(expected);
    expect(FormatTle.setCharAt(TLE1Ending, 12, '+')).toEqual(expected);
    expect(FormatTle.setCharAt(TLE1Ending, 21, '+')).toEqual(expected);
  });
});
